{
  "Print to console": {
    "scope": "cpp",
    "prefix": "disjointSetCpp",
    "body": [
      "class DisjointSet {",
      "public:",
      "    vector<int> parent, rank, size;",
      "",
      "    int findupar(int x) {",
      "        if (parent[x] == x) {",
      "            return x;",
      "        }",
      "        return parent[x] = findupar(parent[x]);",
      "    }",
      "",
      "    DisjointSet(int n) {",
      "        parent.resize(n + 1);",
      "        rank.resize(n + 1, 0);",
      "        size.resize(n + 1, 1);",
      "",
      "        for (int cntr = 0; cntr < n + 1; cntr++) {",
      "            parent[cntr] = cntr;",
      "        }",
      "    }",
      "",
      "    void unionByRank(int x, int y) {",
      "        int parx = findupar(x);",
      "        int pary = findupar(y);",
      "        if (parx == pary)",
      "            return;",
      "        if (parx != pary) {",
      "            if (rank[parx] > rank[pary]) {",
      "                parent[pary] = parx;",
      "            } else if (rank[parx] < rank[pary]) {",
      "                parent[parx] = pary;",
      "            } else {",
      "                parent[pary] = parx;",
      "                rank[parx]++;",
      "            }",
      "        }",
      "    }",
      "",
      "    void unionBySize(int u, int v) {",
      "        int parx = findupar(u);",
      "        int pary = findupar(v);",
      "        if (parx != pary) {",
      "            if (size[parx] >= size[pary]) {",
      "                parent[pary] = parx;",
      "                size[parx] += size[pary];",
      "            } else if (size[parx] < size[pary]) {",
      "                parent[parx] = pary;",
      "                size[pary] += size[parx];",
      "            }",
      "        }",
      "    }",
      "};",
      ""
    ],
    "description": "C++ disjoint set class"
  }
}
